// Code generated by ogen, DO NOT EDIT.

package restapi

// Ref: #/components/schemas/Answer
type Answer struct {
	ID   OptUint64 `json:"id"`
	Text OptString `json:"text"`
}

// GetID returns the value of ID.
func (s *Answer) GetID() OptUint64 {
	return s.ID
}

// GetText returns the value of Text.
func (s *Answer) GetText() OptString {
	return s.Text
}

// SetID sets the value of ID.
func (s *Answer) SetID(val OptUint64) {
	s.ID = val
}

// SetText sets the value of Text.
func (s *Answer) SetText(val OptString) {
	s.Text = val
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUint64 returns new OptUint64 with value set to v.
func NewOptUint64(v uint64) OptUint64 {
	return OptUint64{
		Value: v,
		Set:   true,
	}
}

// OptUint64 is optional uint64.
type OptUint64 struct {
	Value uint64
	Set   bool
}

// IsSet returns true if OptUint64 was set.
func (o OptUint64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUint64) Reset() {
	var v uint64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUint64) SetTo(v uint64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUint64) Get() (v uint64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUint64) Or(d uint64) uint64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Task
type Task struct {
	ID       OptUint64 `json:"id"`
	Question OptString `json:"question"`
	Answers  []Answer  `json:"answers"`
}

// GetID returns the value of ID.
func (s *Task) GetID() OptUint64 {
	return s.ID
}

// GetQuestion returns the value of Question.
func (s *Task) GetQuestion() OptString {
	return s.Question
}

// GetAnswers returns the value of Answers.
func (s *Task) GetAnswers() []Answer {
	return s.Answers
}

// SetID sets the value of ID.
func (s *Task) SetID(val OptUint64) {
	s.ID = val
}

// SetQuestion sets the value of Question.
func (s *Task) SetQuestion(val OptString) {
	s.Question = val
}

// SetAnswers sets the value of Answers.
func (s *Task) SetAnswers(val []Answer) {
	s.Answers = val
}
